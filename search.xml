<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo(双线路)绑定域名时走过的一些弯路]]></title>
    <url>%2Fstudy%2FHexo%2Fblog_site%2F</url>
    <content type="text"><![CDATA[一 搭建环境 已经搭建好的博客 x1 已经购买好的域名 x1 二 实现Coding与Github双线路先说以下为啥要Coding与Github双线路，抛开速度不说，还有一个原因是github不能被百度爬虫，意味着，百度无法收录你的博客内容，就无法检索到了 注册Coding与Github注册Coding时，有一点很重要，就是新账号的用户名是一串乱码，一定要自己改成想要的名字（只能改一次），这点很重要！！！注册Github时，用户名就是自己注册名，这个倒是不用担心什么 为啥？ 因为，如果想要使用name.coding.me或name.github.io访问自己的博客，就必须建立的新repo和用户名一致，否则，就只能用name.coding.me/博客名 或name.github.io/博客名这种子目录的形式来访问了，但是尴尬的是，这样的子目录是没办法绑定域名直接访问的，这也是我绕了很久的地方 还有一点，就是coding与github的绑定邮箱最好是同一个邮箱，这样在执行hexo d时才不会有认证失败的情况出现 现在coding被腾讯收购了，所以大家在注册的时候可以直接注册腾讯开发云的账号，省得折腾，虽然是收购，他们使用的用户信息是一套，但是邮箱信息又不会同步到腾讯开发云，这就导致了，你在coding绑定的邮箱，无法在腾讯开发云上再绑定，会报邮箱重复(你倒是给我同步过来啊喂。。。)，所以，你们懂的 coding：新建项目由于github的之前一篇博客已经讲过了，这里就不再细说，主要说下coding怎么配置(1) 新建一个项目，取名与自己的用户名一致(2) 进入新建项目，设置公钥将自己电脑上的ira.pub（C:\Users\XXXXX.ssh\ira.pub）中的内容复制如果没有此文件的话，可以通过ssh-keygen -t rsa -C “github登陆邮箱/coding绑定邮箱”生成打开新建项目，设置–&gt;部署公钥，新建公钥，将刚才复制的内容黏贴进去，并勾选“授予推送权限”，保存即可 配置Hexo因为要实现双线路，同时推送给coding与github，所以Hexo的配置部分需要修改，这样在我们执行hexo d时，就会同时推送啦coding 的信息，可以在代码浏览处获得，选择ssh配置内容具体如下： 123456deploy:type: gitrepository: github: git@github.com:achoujiademiao/achoujiademiao.github.io.git coding: git@git.dev.tencent.com:achoujiademiao/achoujiademiao.gitbranch: master hexo d推送 coding中打开pages服务在代码–&gt;Pages服务页面，直接开启就行至此，就已经实现了coding与github的同时推送与搭建了 三 域名绑定购买域名购买域名的办法和网站有很多啦，为了图省事儿，我直接在阿里云万网购买了相关域名，为啥买.top后缀的？ 因为便宜，三年才67，就用这三年来看看，我是否能坚持下来写博客了，哈哈 注册阿里云账号 实名认证，添加自己的信息模板，如下图所示，官网上写的实名认证时间需要3-5天，其实一会儿就认证通过了，前后加起来不到20分钟，认证过程中，会显示审核中，此时是无法购买域名的，所以只能耐心等待啦 点击域名列表–&gt;域名注册，在域名注册页面进行自己的选择，进行购买，其中结算时，要选择个人，并勾选已实名认证的个人信息，付完钱后耐心等待即可，因为域名审核也需要一定的时间，所有当域名显示审核中时，也是无法使用的 域名解析在已经审核通过的域名后面直接点击解析，进入云解析DNS界面，进行配置 配置github与coding解析记录具体内容如下所示coding的线路要选择默认，因为他的服务器在香港，如果配置成境内的话，是无法解析的，在ping的时候，会报“主机不能识别”、github主要是为了境外访问，所以线路直接选择境外PS. 一定要先配置name.coding.me，等coding可以正确解析后，再配置name.github.io，否则，就会出现coding绑定域名时，提示“域名未连通” 在Hexo\Source下新建文件CNAME，无后缀，在文件中添加自己的域名XXXXXX.XX，最好不要加www，这样XXXXXX.XX 与 www.XXXXXX.XX 都可以访问到博客，否则，就必须使用www.XXXXXX.XX 来进行访问 hexo d推送，将CNAME推送到github 在coding的pages服务设置中，绑定域名 此时就可以通过域名来访问了，实现的是境外github，境内coding~]]></content>
      <categories>
        <category>学习</category>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo主题修饰(Next)]]></title>
    <url>%2Fstudy%2FHexo%2Fblog_theme%2F</url>
    <content type="text"><![CDATA[最初的时候，也是看了很多的主题，一直在比较到底哪个主题好看，搞到最后头晕眼花，索性不如就用简单大方的Next，Next是一款人气非常高的主题，主打黑白界面，更容易使人的注意力放在内容上同类型的主题还有一款maupassant，也是简约派 一 搭建环境 名称 版本 操作系统 Windows_NT 10.0.15063 win32 x64 hexo 3.7.1 next v6.0.0 二 安装Next可以有两种方式进行安装： 通过git下载 1git clone https://github.com/theme-next/hexo-theme-next themes/next 网页直接下载并解压至Hexo\theme目录下，重命名为next即可 三 配置Hexo基础信息Hexo配置文件为Hexo_config.yml Site如下，title为网页的名字，subtitle可以写一些鸡汤小短句……不过，next主题默认是不会显示subtitle的，所以没什么用description与keywwords可以根据自己的需要填写，next里也不会显示……如果界面需要显示为简体中文，那么language一定要配置为 zh-Hans1234567title: 阿臭家的喵subtitle: description: keywords: author: achoujiademiaolanguage: zh-Hanstimezone: Asia/Shanghai URL这个url与root很重要，具体与网页直接github或coding访问有关，这个在域名配置的时候详细说明permalink在最初的时候是有一个默认值的，不过，由于是以时间来作为目录的，路径较深，不利于检索，所以，这里改成了通过分类与标题作为路径1234url: https://achoujiademiao.github.ioroot: /permalink: :category/:title/permalink_defaults: Category &amp; Tag由于分类时大部分写的为中文，但是中文作为路径，检索不是很方便，所以修改了以下配置这里是可以给category与tag加一个匹配map，例如，文章分类中写的学习，那么自动替换为study12345# Category &amp; Tagdefault_category: uncategorizedcategory_map: 学习: studytag_map: 文章：12345678---title: Hexo主题修饰(Next)category: - 学习- Hexotoc: truecopyright: true--- 网页访问路径：http://achoujiademiao.top/study/Hexo/blog_theme/如果没有配置，就会显示为:http://achoujiademiao.top/学习/Hexo/blog_theme/ps. blog_theme 是我写的md文件的文件名blog_theme.md Extensions这个博客采用的是next的主题，所以这里就设置为next啦，主要是得和Hexo\theme内的主题存放文件夹名一致1theme: next 四 配置Next样式Next配置文件为Hexo\theme\next_config.yml由于想要配置的内容不多，所以就只改了以下几点： 修改favicon 修改页脚 menu对应 Schemes样式配置 修改faviconsmall 为16x16的icomedium 为32x32的ico这里主要是需要把自己喜欢的ico图片放到这个路径下：Hexo\themes\next\source\images123favicon: small: /images/favicon-16x16.ico medium: /images/favicon-32x32.ico 修改页脚由于不想要页脚下显示powered by Hexo theme by NexT XXXX，所以对powered与theme都做了处理icon原先是一颗爱心，换成snowflake-o后，变成了一颗小雪花，具体见页面页脚123456789footer: since: 2019 icon: snowflake-o copyright: achoujiademiao powered: theme: enable: false version: false menuhome与archives都是默认就有的，不必修改，这里我只添加了一个categories界面同时，不喜欢有那些小图标，所以menu_icons我也关了新建界面，需要在gitbash 或 powershell中先执行新建界面命令，后做映射1PS E:\Hexo&gt; hexo new page "categories" 1234567menu: home: / || home categories: /categories/ || categories archives: /archives/ || archivesmenu_icons: enable: false Schemesnext有四种样式供你选择，schene可以修改，我这里使用的是Mist，其他的效果如下图，可以根据自己喜欢的风格进行选择Gemini 与Pisces类似，前者比后者略款一些12345# Schemes#scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini MusePisces Sidebar Avatar将自己喜欢的头像放置Hexo\themes\next\source\images，设置avatar指向头像图片1avatar: /images/avatar.png busuanzi统计全部置为true，加上中文123456789101112131415busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; 访问人数 site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; 访问总量 site_pv_footer: # custom pv span for one page only page_pv: true page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt; 浏览 page_pv_footer: 五 一些其他扩展hexo markdown中添加本地图片网上有很多方法，包括直接引用，图床等等，因为在网上看别人的博客，很多用图床的，文章里都会有部分图片无法显示，这里主要介绍直接引用的方法（其实时因为懒，哈哈），虽然图片都上传github有点占空间，可是，坚持写博客也不是一件容易的事情，如果后续能坚持下来，占用完了github仓库的空间，再来折腾(T_T) Hexo根目录打开git bash或powershell，安装hexo-asset-image 1PS E:\Hexo&gt; npm install hexo-asset-image --save 每次写md时的图片，可以通过在_post目录下建立与文件名一样的文件夹，图片放在文件夹内 通过![Muse](1.png)进行引用 添加本地搜索 Hexo根目录打开git bash或powershell，安装hexo-asset-image 1PS E:\Hexo&gt; npm install hexo-generator-searchdb --save 在Hexo配置文件最后添加以下内容 123456# local search search: path: search.xml field: post format: html limit: 10000 next配置文件打开local_search 1234local_search: enable: true trigger: auto top_n_per_article: 3 添加侧边小宠物偶尔看见一次别人的博客里有小娃娃，感觉很可爱，所以借鉴了一下 Hexo根目录打开git bash或powershell，安装hexo-helper-live2d 1PS E:\Hexo&gt; npm install hexo-helper-live2d --save 下载live2d模型下载地址live2d模型展示地址 这里也是可以通过npm来安装的 1PS E:\Hexo&gt; npm install live2d-widget-model-tororo --save but，我又是通过直接下载保存来操作的(1) 在Hexo根目录下建立live2d_models文件夹(2) 将喜欢的模型从github上下载下来，直接放入新建立的文件夹就可以 配置Hexo配置文件_config.yml，在最后加入以下内容，其中需要修改use为自己使用的模型包名123456789101112131415# petlive2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ model: use: live2d-widget-model-tororo display: position: right width: 100 height: 200 mobile: show: true 到这里，整个博客就差不多啦]]></content>
      <categories>
        <category>学习</category>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用Github Pages+Hexo搭建简单博客]]></title>
    <url>%2Fstudy%2FHexo%2Fcreate_blog%2F</url>
    <content type="text"><![CDATA[Github Pages本是用于管理介绍Projects的静态页面，不过由于其空间免费稳定，可用于搭建个人博客。Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo支持Markdown，以及一键部署，对普通用户来说，非常简单便捷 一 部署环境 名称 版本 操作系统 Windows_NT 10.0.15063 win32 x64 hexo 3.7.1 hexo-cli 1.1.0 node 10.7.0 二 安装Git1 安装Node.js官网下载相关版本，安装即可：Node.js下载地址 2 安装Git官网下载相关版本，安装即可：Git下载地址通过命令查看git是否安装成功12E:\&gt;git versiongit version 2.18.0.windows.1 三 安装Hexo1 安装Hexo点击鼠标右键，选中Git Bash Here，进入Git Bash，运行123456789zzz@hhhhhh MINGW64 /e$ npm install hexo-cli -g······+ hexo-cli@1.1.0added 123 packages from 88 contributors, removed 1 package and updated 35 packages in 17.606szzz@hhhhhh MINGW64 /e$ 2 Hexo初始化建立相关目录，如：E:\Hexo_test，在此目录中打开Git Bash（进入此目录，点击右键，选择Git Bash Here）执行hexo init12345678910111213141516171819202122232425262728zzz@hhhhhh MINGW64 /e/hexo_test$ hexo initINFO Cloning hexo-starter to E:\Hexo_testCloning into 'E:\Hexo_test'...remote: Enumerating objects: 68, done.remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 68Unpacking objects: 100% (68/68), done.Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'Cloning into 'E:/Hexo_test/themes/landscape'...remote: Enumerating objects: 1, done.remote: Counting objects: 100% (1/1), done.remote: Total 867 (delta 0), reused 0 (delta 0), pack-reused 866Receiving objects: 100% (867/867), 2.55 MiB | 680.00 KiB/s, done.Resolving deltas: 100% (459/459), done.Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc7543960d350'INFO Install dependenciesnpm WARN deprecated titlecase@1.1.2: no longer maintainednpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)added 421 packages from 500 contributors in 79.859sINFO Start blogging with Hexo!zzz@hhhhhh MINGW64 /e/hexo_test$ 3 在本地打开hexo在E:\Hexo_test中打开cmd或powershell，执行与hexo g 后再执行hexo server结果如下：至此本地Hexo搭建完成 4 安装hexo-deployer-git为了后续能将Hexo页面顺利push到Git Pages，需安装hexo-deployer-git在E:\Hexo_test中打开cmd或powershell，执行npm install hexo-deployer-git –save12345678PS E:\Hexo_test&gt; npm install hexo-deployer-git --savenpm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)+ hexo-deployer-git@1.0.0added 57 packages from 46 contributors in 18.487sPS E:\Hexo_test&gt; 虽然结果有报错，但是对后续貌似没什么影响，暂时忽略 四 将Hexo部署到Github Pages1 注册github账户Github地址，直接首页Sign up即可 2 创建repository 3 配置ssh密钥(1) 在git bash中输入ssh-keygen -t rsa -C “github登陆邮箱”，遇到停顿直接回车即可 (2) 运行以下指令将公钥复制到剪切板1clip &lt; ~/.ssh/id_rsa.pub (3) 设置github 登陆github，进入Settings (4) 测试：1234ssh -T git@github.comzzz@hhhhhh MINGW64 /e/Hexo_test$ ssh -T git@github.comHi yumenokatachi! You've successfully authenticated, but GitHub does not provide shell access. 4 设置用户信息git config –global user.name XXXXXXgit config –global user.email XXXXXX@XXXX.XXX 5 将本地Hexo文件更新是Github中(1) 复制ssh信息进入刚才新建的repository中，在Clone or download中选择Use SSH后复制ssh信息 (2) 修改hexo配置文件打开本地Hexo文件夹中_config.yml修改配置文件如下 (3) 上传hexo文件至github在Hexo文件路径下打开cmd或Git Bash，运行hexo g -d，执行后若需输入账号密码，则直输入github账号密码即可 6 在互联网访问搭建好的Hexo浏览器输入 https://XXXXXX.github.io 即可]]></content>
      <categories>
        <category>学习</category>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Postgresql 简单源码安装(CentOS6.5)]]></title>
    <url>%2Fstudy%2FPostgresql%2Fcreate_pg%2F</url>
    <content type="text"><![CDATA[一 部署环境 操作系统： CentOS6.5 软件版本： postgresql-9.5.6 二 获取源码安装包地址：postgres源码安装包下载地址 三 编译并安装1 解压安装包上传安装包并解压至/usr/local/src,跳转至解压后的文件夹123456[root@CentOS6-2 src]# cd /usr/local/src[root@CentOS6-2 src]# tar -xvzf postgresql-9.5.6.tar.gz -C ./······postgresql-9.5.6/configure.inpostgresql-9.5.6/INSTALL[root@CentOS6-2 src]# 2 创建软件安装目录在/usr/local 新建postgres文件夹1[root@CentOS6-2 src]# mkdir /usr/local/postgres 3 编译跳转至解压后的文件夹/usr/local/src/postgresql-9.5.6执行编译 ./configure –prefix=/usr/local/postgres1234567891011[root@CentOS6-2 src]# cd /usr/local/src/postgresql-9.5.6[root@CentOS6-2 postgresql-9.5.6]# lsaclocal.m4 configure contrib doc HISTORY Makefile srcconfig configure.in COPYRIGHT GNUmakefile.in INSTALL README[root@CentOS6-2 postgresql-9.5.6]# ./configure --prefix=/usr/local/postgreschecking for library containing readline... noconfigure: error: readline library not foundIf you have readline already installed, see config.log for details on thefailure. It is possible the compiler isn't looking in the proper directory.Use --without-readline to disable readline support.[root@CentOS6-2 postgresql-9.5.6]# 由于本地没有安装readline，所以出现报错，此处，使用yum对readline进行安装，或者也可以执行./configure –prefix=/usr/local/postgres –without-readline跳过readline1234567[root@CentOS6-2 postgresql-9.5.6]# yum install readline readline-devel······[root@CentOS6-2 postgresql-9.5.6]# ./configure --prefix=/usr/local/postgres······config.status: linking src/include/port/linux.h to src/include/pg_config_os.hconfig.status: linking src/makefiles/Makefile.linux to src/Makefile.port[root@CentOS6-2 postgresql-9.5.6]# 4 执行make &amp;&amp; make install12345678[root@CentOS6-2 postgresql-9.5.6]# make &amp;&amp; make install······/bin/mkdir -p '/usr/local/postgres/lib/pgxs/config'/usr/bin/install -c -m 755 ./install-sh '/usr/local/postgres/lib/pgxs/config/install-sh'/usr/bin/install -c -m 755 ./missing '/usr/local/postgres/lib/pgxs/config/missing'make[1]: Leaving directory `/usr/local/src/postgresql-9.5.6/config'PostgreSQL installation complete.[root@CentOS6-2 postgresql-9.5.6]# 5 修改环境变量1234[root@CentOS6-2 postgres]# vi /etc/profile在/etc/profile中加入以下一行语句： export PATH=$PATH:/usr/local/postgres/bin[root@CentOS6-2 postgres]# source /etc/profile 四 数据库初始化1 创建相关用户postgres及数据库数据文件夹123[root@CentOS6-2 postgres]# useradd postgres[root@CentOS6-2 postgres]# chown postgres.postgres /usr/local/postgres/data[root@CentOS6-2 postgres]# mkdir /usr/local/postgres/data 2 数据库初始化与启停切换至postgres用户下，执行initdb -D /usr/local/postgres/data即可123456789101112131415161718[root@CentOS6-2 postgres]# su - postgres[postgres@CenOS6-2 ~]$ initdb -D /usr/local/postgres/data······Success. You can now start the database server using: pg_ctl -D /usr/local/postgres/data -l logfile start[postgres@CenOS6-2 ~]$ pg_ctl -D /usr/local/postgres/data -l logfile startserver starting[postgres@CenOS6-2 ~]$ pg_ctl -D /usr/local/postgres/data -l logfile stopwaiting for server to shut down.... doneserver stopped[postgres@CenOS6-2 data]$ cd /usr/local/postgres/data[postgres@CenOS6-2 data]$ lsbase pg_commit_ts pg_ident.conf pg_notify pg_snapshots pg_subtrans PG_VERSION postgresql.confglobal pg_dynshmem pg_logical pg_replslot pg_stat pg_tblspc pg_xlog postmaster.optspg_clog pg_hba.conf pg_multixact pg_serial pg_stat_tmp pg_twophase postgresql.auto.conf[postgres@CenOS6-2 data]$ 3 postgres服务启动跳转至解压包中获取启动脚本（/usr/local/src/postgresql-9.5.6/contrib/start-scripts），并复制至/etc/init.d123[root@CentOS6-2 postgres]# cd /usr/local/src/postgresql-9.5.6/contrib/start-scripts[root@CentOS6-2 start-scripts]# lsfreebsd linux osx 修改脚本参数1234567891011121314151617181920212223[root@CentOS6-2 start-scripts]# vi linux # Installation prefix prefix=/usr/local/postgres # Data directory PGDATA="/usr/local/postgres/data"[root@CentOS6-2 start-scripts]# cp linux /etc/init.d/postgres[root@CentOS6-2 start-scripts]# chmod 755 /etc/init.d/postgres[root@CentOS6-2 start-scripts]# service postgres startStarting PostgreSQL: ok[root@CentOS6-2 start-scripts]# ps -ef | grep postgrespostgres 13908 1 0 22:18 ? 00:00:00 /usr/local/postgres/bin/postmaster -D /usr/local/postgres/datapostgres 13910 13908 0 22:18 ? 00:00:00 postgres: checkpointer process postgres 13911 13908 0 22:18 ? 00:00:00 postgres: writer process postgres 13912 13908 0 22:18 ? 00:00:00 postgres: wal writer process postgres 13913 13908 0 22:18 ? 00:00:00 postgres: autovacuum launcher process postgres 13914 13908 0 22:18 ? 00:00:00 postgres: stats collector process root 13918 3486 0 22:18 pts/1 00:00:00 grep postgres[root@CentOS6-2 start-scripts]# service postgres stopStopping PostgreSQL: ok[root@CentOS6-2 start-scripts]# ps -ef | grep postgresroot 13944 3486 0 22:18 pts/1 00:00:00 grep postgres[root@CentOS6-2 start-scripts]#]]></content>
      <categories>
        <category>学习</category>
        <category>Postgresql</category>
      </categories>
  </entry>
</search>
