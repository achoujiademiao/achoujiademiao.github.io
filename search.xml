<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Github Pages+Hexo搭建简单博客]]></title>
    <url>%2Fstudy%2FHexo%2Fcreate_blog%2F</url>
    <content type="text"><![CDATA[Github Pages本是用于管理介绍Projects的静态页面，不过由于其空间免费稳定，可用于搭建个人博客。Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo支持Markdown，以及一键部署，对普通用户来说，非常简单便捷 一 部署环境 序号 名称 版本 1 操作系统 Windows_NT 10.0.15063 win32 x64 2 hexo 3.7.1 3 hexo-cli 1.1.0 4 node 10.7.0 二 安装Git1 安装Node.js官网下载相关版本，安装即可：Node.js下载地址 2 安装Git官网下载相关版本，安装即可：Git下载地址通过命令查看git是否安装成功12E:\&gt;git versiongit version 2.18.0.windows.1 三 安装Hexo1 安装Hexo点击鼠标右键，选中Git Bash Here，进入Git Bash，运行123456789zzz@hhhhhh MINGW64 /e$ npm install hexo-cli -g······+ hexo-cli@1.1.0added 123 packages from 88 contributors, removed 1 package and updated 35 packages in 17.606szzz@hhhhhh MINGW64 /e$ 2 Hexo初始化建立相关目录，如：E:\Hexo_test，在此目录中打开Git Bash（进入此目录，点击右键，选择Git Bash Here）执行hexo init12345678910111213141516171819202122232425262728zzz@hhhhhh MINGW64 /e/hexo_test$ hexo initINFO Cloning hexo-starter to E:\Hexo_testCloning into 'E:\Hexo_test'...remote: Enumerating objects: 68, done.remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 68Unpacking objects: 100% (68/68), done.Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'Cloning into 'E:/Hexo_test/themes/landscape'...remote: Enumerating objects: 1, done.remote: Counting objects: 100% (1/1), done.remote: Total 867 (delta 0), reused 0 (delta 0), pack-reused 866Receiving objects: 100% (867/867), 2.55 MiB | 680.00 KiB/s, done.Resolving deltas: 100% (459/459), done.Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc7543960d350'INFO Install dependenciesnpm WARN deprecated titlecase@1.1.2: no longer maintainednpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)added 421 packages from 500 contributors in 79.859sINFO Start blogging with Hexo!zzz@hhhhhh MINGW64 /e/hexo_test$ 3 在本地打开hexo在E:\Hexo_test中打开cmd或powershell，执行与hexo g 后再执行hexo server结果如下：至此本地Hexo搭建完成 4 安装hexo-deployer-git为了后续能将Hexo页面顺利push到Git Pages，需安装hexo-deployer-git在E:\Hexo_test中打开cmd或powershell，执行npm install hexo-deployer-git –save12345678PS E:\Hexo_test&gt; npm install hexo-deployer-git --savenpm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)+ hexo-deployer-git@1.0.0added 57 packages from 46 contributors in 18.487sPS E:\Hexo_test&gt; 虽然结果有报错，但是对后续貌似没什么影响，暂时忽略 四 将Hexo部署到Github Pages1 注册github账户Github地址，直接首页Sign up即可 2 创建repository 3 配置ssh密钥(1) 在git bash中输入ssh-keygen -t rsa -C “github登陆邮箱”，遇到停顿直接回车即可 (2) 运行以下指令将公钥复制到剪切板1clip &lt; ~/.ssh/id_rsa.pub (3) 设置github 登陆github，进入Settings (4) 测试：1234ssh -T git@github.comzzz@hhhhhh MINGW64 /e/Hexo_test$ ssh -T git@github.comHi yumenokatachi! You've successfully authenticated, but GitHub does not provide shell access. 4 设置用户信息git config –global user.name XXXXXXgit config –global user.email XXXXXX@XXXX.XXX 5 将本地Hexo文件更新是Github中(1) 复制ssh信息进入刚才新建的repository中，在Clone or download中选择Use SSH后复制ssh信息 (2) 修改hexo配置文件打开本地Hexo文件夹中_config.yml修改配置文件如下 (3) 上传hexo文件至github在Hexo文件路径下打开cmd或Git Bash，运行hexo g -d，执行后若需输入账号密码，则直输入github账号密码即可 6 在互联网访问搭建好的Hexo浏览器输入 https://XXXXXX.github.io 即可]]></content>
      <categories>
        <category>学习</category>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Postgresql 简单源码安装(CentOS6.5)]]></title>
    <url>%2Fstudy%2FPostgresql%2Fcreate_pg%2F</url>
    <content type="text"><![CDATA[一 部署环境 操作系统： CentOS6.5 软件版本： postgresql-9.5.6 二 获取源码安装包地址：postgres源码安装包下载地址 三 编译并安装1 解压安装包上传安装包并解压至/usr/local/src,跳转至解压后的文件夹123456[root@CentOS6-2 src]# cd /usr/local/src[root@CentOS6-2 src]# tar -xvzf postgresql-9.5.6.tar.gz -C ./······postgresql-9.5.6/configure.inpostgresql-9.5.6/INSTALL[root@CentOS6-2 src]# 2 创建软件安装目录在/usr/local 新建postgres文件夹1[root@CentOS6-2 src]# mkdir /usr/local/postgres 3 编译跳转至解压后的文件夹/usr/local/src/postgresql-9.5.6执行编译 ./configure –prefix=/usr/local/postgres1234567891011[root@CentOS6-2 src]# cd /usr/local/src/postgresql-9.5.6[root@CentOS6-2 postgresql-9.5.6]# lsaclocal.m4 configure contrib doc HISTORY Makefile srcconfig configure.in COPYRIGHT GNUmakefile.in INSTALL README[root@CentOS6-2 postgresql-9.5.6]# ./configure --prefix=/usr/local/postgreschecking for library containing readline... noconfigure: error: readline library not foundIf you have readline already installed, see config.log for details on thefailure. It is possible the compiler isn't looking in the proper directory.Use --without-readline to disable readline support.[root@CentOS6-2 postgresql-9.5.6]# 由于本地没有安装readline，所以出现报错，此处，使用yum对readline进行安装，或者也可以执行./configure –prefix=/usr/local/postgres –without-readline跳过readline1234567[root@CentOS6-2 postgresql-9.5.6]# yum install readline readline-devel······[root@CentOS6-2 postgresql-9.5.6]# ./configure --prefix=/usr/local/postgres······config.status: linking src/include/port/linux.h to src/include/pg_config_os.hconfig.status: linking src/makefiles/Makefile.linux to src/Makefile.port[root@CentOS6-2 postgresql-9.5.6]# 4 执行make &amp;&amp; make install12345678[root@CentOS6-2 postgresql-9.5.6]# make &amp;&amp; make install······/bin/mkdir -p '/usr/local/postgres/lib/pgxs/config'/usr/bin/install -c -m 755 ./install-sh '/usr/local/postgres/lib/pgxs/config/install-sh'/usr/bin/install -c -m 755 ./missing '/usr/local/postgres/lib/pgxs/config/missing'make[1]: Leaving directory `/usr/local/src/postgresql-9.5.6/config'PostgreSQL installation complete.[root@CentOS6-2 postgresql-9.5.6]# 5 修改环境变量1234[root@CentOS6-2 postgres]# vi /etc/profile在/etc/profile中加入以下一行语句： export PATH=$PATH:/usr/local/postgres/bin[root@CentOS6-2 postgres]# source /etc/profile 四 数据库初始化1 创建相关用户postgres及数据库数据文件夹123[root@CentOS6-2 postgres]# useradd postgres[root@CentOS6-2 postgres]# chown postgres.postgres /usr/local/postgres/data[root@CentOS6-2 postgres]# mkdir /usr/local/postgres/data 2 数据库初始化与启停切换至postgres用户下，执行initdb -D /usr/local/postgres/data即可123456789101112131415161718[root@CentOS6-2 postgres]# su - postgres[postgres@CenOS6-2 ~]$ initdb -D /usr/local/postgres/data······Success. You can now start the database server using: pg_ctl -D /usr/local/postgres/data -l logfile start[postgres@CenOS6-2 ~]$ pg_ctl -D /usr/local/postgres/data -l logfile startserver starting[postgres@CenOS6-2 ~]$ pg_ctl -D /usr/local/postgres/data -l logfile stopwaiting for server to shut down.... doneserver stopped[postgres@CenOS6-2 data]$ cd /usr/local/postgres/data[postgres@CenOS6-2 data]$ lsbase pg_commit_ts pg_ident.conf pg_notify pg_snapshots pg_subtrans PG_VERSION postgresql.confglobal pg_dynshmem pg_logical pg_replslot pg_stat pg_tblspc pg_xlog postmaster.optspg_clog pg_hba.conf pg_multixact pg_serial pg_stat_tmp pg_twophase postgresql.auto.conf[postgres@CenOS6-2 data]$ 3 postgres服务启动跳转至解压包中获取启动脚本（/usr/local/src/postgresql-9.5.6/contrib/start-scripts），并复制至/etc/init.d123[root@CentOS6-2 postgres]# cd /usr/local/src/postgresql-9.5.6/contrib/start-scripts[root@CentOS6-2 start-scripts]# lsfreebsd linux osx 修改脚本参数1234567891011121314151617181920212223[root@CentOS6-2 start-scripts]# vi linux # Installation prefix prefix=/usr/local/postgres # Data directory PGDATA="/usr/local/postgres/data"[root@CentOS6-2 start-scripts]# cp linux /etc/init.d/postgres[root@CentOS6-2 start-scripts]# chmod 755 /etc/init.d/postgres[root@CentOS6-2 start-scripts]# service postgres startStarting PostgreSQL: ok[root@CentOS6-2 start-scripts]# ps -ef | grep postgrespostgres 13908 1 0 22:18 ? 00:00:00 /usr/local/postgres/bin/postmaster -D /usr/local/postgres/datapostgres 13910 13908 0 22:18 ? 00:00:00 postgres: checkpointer process postgres 13911 13908 0 22:18 ? 00:00:00 postgres: writer process postgres 13912 13908 0 22:18 ? 00:00:00 postgres: wal writer process postgres 13913 13908 0 22:18 ? 00:00:00 postgres: autovacuum launcher process postgres 13914 13908 0 22:18 ? 00:00:00 postgres: stats collector process root 13918 3486 0 22:18 pts/1 00:00:00 grep postgres[root@CentOS6-2 start-scripts]# service postgres stopStopping PostgreSQL: ok[root@CentOS6-2 start-scripts]# ps -ef | grep postgresroot 13944 3486 0 22:18 pts/1 00:00:00 grep postgres[root@CentOS6-2 start-scripts]#]]></content>
      <categories>
        <category>学习</category>
        <category>Postgresql</category>
      </categories>
  </entry>
</search>
